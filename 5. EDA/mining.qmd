---
title: "Transformation and Clustering"
format: html
---


```{r}
#| warning: false
library(tidyverse)
library(here)
library(FactoMineR)
library(factoextra)
```


```{r}
#| warning: false
#| message: false
dataset <- read_csv(here("4. Data","consolidated.csv")) |>
  filter(!is.na(Australian_Citizens)) |>
  mutate(Year=election_year,.keep="unused")

test <- dataset |> filter(Year==2022)
write_csv(test,here("4. Data","test.csv"))

dataset <- dataset |> filter(Year!=2022)

averages <- 
dataset |>
  select(-any_of(c("ALP","COAL","GRN","Other","StateAb","DivisionNm"))) |>
  group_by(Year)                                                |>
  summarise(across(everything(), ~ mean(.x, na.rm = TRUE)))     

```

# Scaling of Predictors

```{r}

key <- c("Year","StateAb","DivisionNm","Metro_Area","Metro")


predictors_scaled <- dataset |>
 select(-GRN,-ALP,-COAL,-Other) |>
 mutate(across(!any_of(key),as.character)) |>
 pivot_longer(-all_of(key),
              names_to = "Var",values_to = "Value") |>
  left_join( averages |> pivot_longer(-c("Year"),names_to="Var",values_to="avg"),
             by=c("Year","Var")) |>
  mutate(Value = as.numeric(Value)-avg,.keep="unused") |>
  pivot_wider(names_from = Var, values_from = Value)


```

```{r}
#| eval: false

GGally::ggpairs(predictors_scaled |> select(-any_of(c("Year","StateAb","DivisionNm"))))

```



```{r}
colnames(predictors_scaled |>  select(-any_of(c("Year","DivisionNm","StateAb"))))
```

# MFA

```{r}

groups <- colnames(predictors_scaled |> select(-any_of(c("StateAb","Metro_Area","DivisionNm","Year")))) |>
          as_tibble() |>
          mutate(group=case_when(
            str_detect(value,"_") ~  str_extract(value, "^([^_]+)"),
            TRUE ~ value
          )) 

group_order <- distinct(groups,group) |> mutate(order=row_number())


groups <- groups|>
  group_by(group) |>
  summarise(n=n(),.groups="drop") |>
  left_join(group_order,by="group") |>
  arrange(order)


mfa <- FactoMineR::MFA(predictors_scaled |> 
                       select(-StateAb,-Metro_Area,Metro) |>
                       remove_rownames()  |>
                       mutate(key=str_c(DivisionNm,Year,sep="_"),.before=1,.keep="unused") |>
                       column_to_rownames(var="key"),
                       group=groups$n,
                       ncp=10,
                       type=c("n",rep("c",8)),
                       name.group =groups$group)
```

```{r}
factoextra::fviz_screeplot(mfa)
```

```{r}
mfa$eig |> 
  as_tibble(rownames = "Dimension") |>
  mutate(across(is.numeric,~ round(.x,2)))|> 
  flextable::flextable()
```

5 variables capture 80% of variance

```{r}
factoextra::fviz_mfa_var(mfa,axes=c(1,2))
```

```{r}
factoextra::fviz_mfa_var(mfa,axes=c(3,4))
```

```{r}
factoextra::fviz_mfa_var(mfa,axes=c(5,6))
```


```{r}
factoextra::fviz_mfa_var(mfa,axes=c(7,8))

```

# Clustering


```{r}
clustering <- dbscan::hdbscan(mfa$ind$coord,30)
clustering
```
```{r}
plot(clustering$hc, main="HDBSCAN* Hierarchy")
plot(clustering)

```


```{r}
clustering$cluster
```



```{r}
clusters <- predictors_scaled |>
  select(DivisionNm,Year,Metro) |>
  add_column(cluster=as.character(clustering$cluster)) |>
  mutate(DivisionNm=str_squish(DivisionNm))
```


```{r}
library(aussiemaps)
library(leaflet)
library(sf)

ced2018 <- strayr::read_absmap("ced2018") 


cluster_pal <- colorFactor(topo.colors(6), clusters$cluster)


ced2018 |>
  mutate(ced_name_2016=str_squish(ced_name_2018)) |>
  #mutate(ced_name_2016=if_else(ced_name_2016=="Fraser","Fraser (II)",ced_name_2021)) |>
  left_join(clusters |> filter(Year=="2016"),by=c("ced_name_2016"="DivisionNm")) |>
  filter(!is.na(cluster)) |>
  leaflet() |>
   addTiles() |>
  addPolygons(stroke = TRUE,
              smoothFactor = 0.3, 
              color ="white",
              weight=2,
              fillOpacity = .5,
               fillColor = ~cluster_pal(cluster),
              label=~str_c(ced_name_2016,"(",Metro,")","- ",cluster)) |>
  addLegend("bottomright", pal = cluster_pal, values = ~cluster,
    title = "Clustering of 2016 Electorates",
    opacity = 1
  )

```


See if there are any differences per electorates

```{r}

predictors_clustered <- predictors_scaled |>
                        left_join(clusters, by=c("DivisionNm","Year","Metro")) |>
                        relocate(cluster,.before=1)
  

predictors_clustered |>
  ggplot(aes(x=StateAb,fill=StateAb)) +
   geom_bar(stat = "count") +
   facet_grid(Year~cluster )

```


```{r}
# eval: false
library(trelliscopejs)


predictors_clustered |>
  select(-Metro_Area,-Metro,-Year,-DivisionNm,-StateAb) |>
  pivot_longer(-cluster,names_to="Variable",values_to = "Values") |>
  ggplot(aes(x="1", y=Values)) +
  ggbeeswarm::geom_beeswarm()+
  facet_trelliscope(  Variable ~cluster , nrow = 1, ncol = 3, width = 300)

```


#Variable reduction?

```{r}
var_list <- mfa$global.pca$var$coord |> 
  as_tibble(rownames = "Orig") |>
  pivot_longer(-Orig,names_to = "New",values_to = "weight") |>
  mutate(abs_weight=abs(weight)) |>
  mutate(Dim_number = as.numeric(str_remove(New,"Dim\\."))) |>
  filter(Dim_number <=5) |>
  select(-Dim_number)

total_weight <- var_list |>
  group_by(New) |>
  summarise(total_weight=sum(abs_weight),.groups = "drop")

reduced_columns <-
var_list |>
  left_join(total_weight,by="New") |>
  mutate(abs_perc=abs_weight/total_weight) |>
  arrange(New,-abs_perc) |>
  group_by(New) |>
  mutate(cumul_weight=cumsum(abs_perc)) |>
  ungroup() |>
  filter(cumul_weight<=0.8) |> 
  distinct(Orig) |>
  filter(!(Orig %in% c("Yes","No")))

```


```{r}
# eval: false
predictors_clustered |>
  select(-Metro_Area,-Metro,-Year,-DivisionNm,-StateAb) |>
  select(any_of(c(reduced_columns$Orig,"cluster"))) |>
  pivot_longer(-cluster,names_to="Variable",values_to = "Values") |>
  ggplot(aes(x=cluster, y=Values)) +
  geom_violin() +
  facet_trelliscope(  ~ Variable , nrow = 1, ncol = 1, width = 300)


```



```{r}
  predictors_clustered |>
  select(DivisionNm,cluster,Year) |>
  arrange(DivisionNm) |>
  ggplot(aes(x=as.character(Year),y=DivisionNm,fill=cluster)) +
  geom_tile()
```


```{r}

char_cols <- dataset |> select(where(is.character)) |> colnames()

parties <-  c("ALP","COAL","GRN","Other")
clustered_dataset <- dataset |>
                    left_join(clusters,by=c("DivisionNm","Year","Metro")) |>
                    relocate(cluster,Year,.before=1) |>
                   select(any_of(c("Year","cluster",char_cols,parties,reduced_columns$Orig))) |>
                  mutate(across(any_of(c("ALP","COAL","GRN","Other")), ~replace_na(.x,0)))
  
  

write_csv(clustered_dataset,here("4. Data","consolidated_clustered.csv"))
```

