---
title: "Data Exploration"
author: "Carlos Yanez Sanitbanez"
abstract: "Exploring and extracting possible variables for analysis"
format: 
  html:
    toc: true
    toc-title: "Sections"
    theme: "united"
    number-sections: true
    number-depth: 2
    title-block-banner-color: "<css color white>"
    stand-alone: true
    embed-resources: true
  pdf:
    number-sections: true
    colorlinks: true
execute:
  echo: true
  warning: false
  eval: false
---

```{r}
#| eval: true

library(tidyverse)
library(auspol)
library(auscensus)
library(aussiemaps)
library(cropgrowdays)
library(rhandsontable)
library(here)
library(patchwork)
library(DBI)
library(dbplyr)



base_theme <- customthemes::custom_plot_theme_md(google_font = "Roboto",background_colour = "white", 
                              legend_pos = "botom",legend_dir = "horizontal") +
            theme(legend.title = ggtext::element_markdown(size=6),
                  plot.title = ggtext::element_markdown(size=8),
                  legend.text = ggtext::element_markdown(size=6))

map_theme <- base_theme +
             theme(axis.title = element_blank(),
                   axis.ticks = element_line(colour="grey"))

#default theming for plots ####
theme_set(base_theme) 

customthemes::set_plot_colours(line_colour ="#0085c7",
                               fill_colour = tinter::lighten("#0085c7",0.5),
                               HVline_colour ="grey90")

state_acronyms <- c("NSW","QLD","NT","WA","SA","VIC","TAS","ACT")
election_years <- as.character(c(2007,2010,2016,2022))
census_years <-c(2006,2011,2016,2021)
year_equivalency <- tibble(election_years=election_years,census_years=census_years)

```


```{r dbconnect}
#| eval: true
 
mydb <- dbConnect(duckdb::duckdb(), here("4. Data","consolidated_data.duckdb"),read_only=FALSE)

```


```{r}

dbWriteTable(mydb, "year_equivalency", year_equivalency,overwrite=TRUE)


```


This notebook looks at what sort of variables are available for to use.Variables documented here are used in the script that generates the analysis dataset. 

## Response Variables : Primary voting


Available election years


```{r}
#| eval: true

auspol::list_years()

```

Get parties, coalesce coalition, greens

```{r}

parties <- auspol::list_parties() |>
  select(any_of(c(election_years,"PartyAb","PartyNm"))) |>
  pivot_longer(election_years,names_to = "Year",values_to="Value") |>
  filter(Value) |>
  distinct(PartyAb,PartyNm) 
  
  
parties |>
   rhandsontable(readOnly = TRUE) |>
    hot_cols(columnSorting = TRUE)

write_csv(parties,here("3. Data Extraction","parties.csv"))

```


```{r}
parties <- read_csv(here("3. Data Extraction","parties_edited.csv"))
dbWriteTable(mydb, "parties", parties,overwrite=TRUE)


parties <-parties |> select(Grouping,PartyAb) |> 
  group_by(Grouping) |> summarize(Parties=list(unique(PartyAb)))

parties_merge <-list()

for(i in 1:nrow(parties)){
  parties_merge[length(parties_merge)+1] <- parties[i,]$Parties 
}
names(parties_merge) <- parties$Grouping

primary_vote <- auspol::house_primary_vote_summary(state= state_acronyms, 
                                   parties=names(parties_merge),
                                   merge_parties = parties_merge,
                                   include_names=FALSE,
                                   year=election_years) |>
  select(Year,StateAb,DivisionNm,PartyAb,OrdinaryVotes,Percentage)

dbWriteTable(mydb, "primary_vote", primary_vote,overwrite=TRUE)
```

```{r}
#| eval: true

tbl(mydb,"primary_vote") |>
  collect() |>
  rhandsontable(readOnly = TRUE) |>
    hot_cols(columnSorting = TRUE)
```

```{r}
#| eval: true

party_palette <- auspol::manage_colours(extra_values = unique(primary_vote$PartyAb),
                                        palette =ochRe::ochre_palettes[["tasmania"]])

tbl(mydb,"primary_vote") |>
  collect() |>
  ggplot(aes(x=PartyAb,y=Percentage,colour=PartyAb,fill=PartyAb)) +
  ggbeeswarm::geom_beeswarm(alpha=0.5) +
  facet_grid(Year ~ StateAb) +
  scale_color_manual(values=party_palette)+
  scale_fill_manual(values=party_palette) +
  theme(axis.text.x = element_text(angle=90,hjust=1)) 

```


## Explanatory variables


### Census Data

Type of data - census questions

```{r}
#| eval: true

census_tables <- auscensus::list_census_tables() |>
  as.data.frame()


census_tables|>
   flextable::flextable()

```
Interesting tables:

* 04	Age by Sex
* 09	Country of Birth of Person by Age by Sex
* 08	Ancestry by Birthplace of Parents

* 39 Non-School Qualification: Level of Education by Age by Sex
* 40 Non-School Qualification:  Level of Education by Age by Sex
* 46 Non-School Qualification:  Level of Education by Age by Sex
* 49 Highest Non-School Qualification:  Level of Education by Ag


* 16	Gross Individual Income (Weekly) by Age by Sex	- changed from previous census
* 17	Total Personal Income (Weekly) by Age by Sex


*13 Language Used at Home by Proficiency in Spoken English by Sex
*12 Language Spoken at Home by Sex
*13 Language Spoken at Home by Sex
*13 Language Spoken at Home by Proficiency in Spoken English




* 18 Voluntary Work for an Organisation or Group by Age by Sex
* 19 Voluntary Work for an Organisation or Group by Age by Sex
* 23 Voluntary Work for an Organisation or Group by Age by Sex


Extract values per electorate and then ask about differences within electorates


### 04 Age by Sex

```{r}

# Form list get groups of variables, chunked by generation
var04 <- list_census_attributes(number="04")

var04 <- var04 |>
  filter(str_detect(Attribute,"\\d{1,3}_\\d{1,3}_",TRUE)) |>
  filter(str_detect(Attribute,"\\d{1,3}-\\d{1,3}",TRUE))  |>
  filter(str_detect(Attribute,"\\d{1,3}_persons$",TRUE))  |>
   filter(str_detect(Attribute,"[Oo]ver",TRUE))  |>
   filter(str_detect(Attribute,"[Tt]otal.*[Mm]ales",TRUE)) |>
  pivot_longer(c(-Table,-Attribute), names_to="Year",values_to = "Value") |>
  mutate(Year=as.numeric(Year)) |>
  filter(!is.na(Value)) |>
  mutate(Age_at_census=str_extract(Attribute,"\\d{1,2}") |> as.numeric(),
         YOB = Year-Age_at_census,
         Gender=case_when(
           str_detect(Attribute, "_[Mm]ales$") ~ "Males",
           str_detect(Attribute, "_[Ff]emales$") ~ "Females",
           TRUE ~"-"))

generations <- bind_rows(tibble(YOB=1883:1900,Group="Lost Gen"),
                         tibble(YOB=1901:1927,Group="Greatest Gen"),
                         tibble(YOB=1928:1945,Group="Silent Gen"),
                         tibble(YOB=1946:1964,Group="Baby Boomers"),
                         tibble(YOB=1965:1980,Group="Gen X"),
                         tibble(YOB=1981:1996,Group="Gen Y"),
                         tibble(YOB=1997:2012,Group="Gen Z"),
                         tibble(YOB=2013:2030,Group="Gen Alpha"))

var04 <- var04 |>
        left_join(generations,by="YOB")|>
        mutate(Group=if_else(str_detect(Attribute,"Total"),"Total",Group)) |>
        select(Attribute,Group,Year)


# get the census data

age_and_sex <- tibble()

for(x in census_years){

  if(x=="2006"){
    geo_structure_x <- "CED_2007"
  } else{
    geo_structure_x <- "CED"
  }
  
censusx <- get_census_summary(table_number = "04",
                      geo_structure = geo_structure_x,
                      selected_years = as.character(x),
                      attribute = (var04 |> filter(str_detect(Group,"Total"),TRUE)  |>filter(Year==x)),
                      reference_total = (var04 |> filter(str_detect(Group,"Total"))  |>filter(Year==x))) |>
        filter(str_detect(Unit,"Shipping",TRUE))|>
        filter(str_detect(Unit,"Usual",TRUE))   |>
        filter(str_detect(Unit,"Not Applicable",TRUE)) 
  


age_and_sex <- bind_rows(age_and_sex,censusx)

}

dbWriteTable(mydb, "age_and_sex", age_and_sex,overwrite=TRUE)

rm(censusx,x,var04,totals)



```


```{r}
#| eval: true

plots <- list()
for(i in 1:length(census_years)){
  
  plots[[i]] <- tbl(mydb,"age_and_sex") |>
                collect()|>
                filter(Year==census_years[i])           |>
                mutate(Electorate=str_c(Unit,"-",Year)) |>
                ggplot(aes(x=as.character(Year),y=Percentage,label=Electorate)) +
                ggbeeswarm::geom_beeswarm() + 
                facet_wrap(Attribute ~., ncol = 2 ) 
}

patchwork::wrap_plots(plots,nrow=1)


```

```{r}
#| eval: true

primary_vote <- tbl(mydb,"primary_vote") |>
                collect()|>
                select(-OrdinaryVotes)|>
                pivot_wider(names_from = "PartyAb",values_from = "Percentage") |>
                mutate(across(where(is.numeric), ~ if_else(is.na(.x),0,.x)))   

age_and_sex <- tbl(mydb,"age_and_sex") |>
                collect()|>
                select(Unit,Year,Attribute,Percentage) |>
                pivot_wider(names_from = "Attribute",values_from = Percentage)|>  
                left_join(year_equivalency,by=c("Year"="census_years")) |>
                mutate(Year=as.numeric(election_years))

 

```

```{r}
#| eval: true
primary_vote |>
  left_join(age_and_sex, by=c("DivisionNm"="Unit","Year"="Year")) |>
  select(-election_years) |>
  mutate(across(where(is.numeric), ~ if_else(is.na(.x),0,.x)))  |> 
  pivot_longer(-c(Year,StateAb,DivisionNm,ALP,COAL,GRN,`Other Left`,`Other Right`,Other),
               names_to="Population Group",
               values_to="Pop Percentage")|>
  pivot_longer(c(ALP,COAL,GRN,Other,`Other Left`,`Other Right`),
               names_to = "Party",
               values_to = "Party Percentage") |>
  ggplot(aes(x=`Pop Percentage`,y=`Party Percentage`)) +
  geom_point(alpha=0.5) +
  facet_grid(Party ~`Population Group`)
```




### Non School Qualification 

```{r}
#| eval: true
census_tables <- list_census_tables() |>
                 filter(Number %in% c("39","40","46","49")) |>
                 filter(str_detect(`Table Name`,"Non-School")) |>             
                 filter(str_detect(`Table Name`,"Level of Education by Age by Sex"))


tables_summary <- census_tables |>
                  select(-contains("Table")) |>
                  pivot_longer(-Number, names_to="Year",values_to = "Value") |>
                  filter(!is.na(Value)) |>
                  select(-Value)


list_census_geo_tables(year = tables_summary$Year,geo="CED",table_number = tables_summary$Number) |>
  mutate(Year=as.character(Year)) |>
  right_join(tables_summary, by=c("table_number"="Number","Year"="Year"))
```

No data for 2011 and 2006 collected at Commonwealth Electoral Division Level.
Try SA1/CD then aggregate

```{r}
#| eval: true

list_census_geo_tables(year = tables_summary$Year,geo=c("SA1|CD"),table_number = tables_summary$Number) |>
   mutate(Year=as.character(Year)) |>
  right_join(tables_summary, by=c("table_number"="Number","Year"="Year"))


```


```{r}

school_attributes <- tibble()

for(i in 1:nrow(tables_summary)){
  
  table_i <- tables_summary[i,]$Number
  year_i  <- tables_summary[i,]$Year
  
  attr_i <- list_census_attributes(table_i) |> 
             pivot_longer(-c(Table,Attribute),
                           names_to="Year",values_to = "Value") |>
              filter(Year==year_i) |>
              filter(!is.na(Value)) |>
              select(-Value)
  
  school_attributes <- bind_rows(attr_i,school_attributes)
  
}

  school_attributes <- school_attributes   |> 
                       distinct(Attribute) |>
                      filter(str_detect(Attribute,"[Pp]erson")) |>
                      filter(str_detect(Attribute,"[Aa]ge",TRUE)) |>
                      filter(str_detect(Attribute,"[Yy]ear",TRUE))
school_attributes |> 
  rhandsontable(readOnly = TRUE) |>
  hot_cols(columnSorting = TRUE)

write_csv(school_attributes,"ed_levels.csv")
  
```

```{r}
school_attributes <- read_csv("ed_levels_edited.csv")

#won't count totals
#totals <- list(Total = school_attributes |> filter(Attr_New=="Total") |> pull(Attribute))

school_levels <- school_attributes  |> distinct(Attr_New) |> pull()

levels <- list()
i <-1
for(level in school_levels){
  
  levels[[i]]      <-  school_attributes |> filter(Attr_New==level)  |> pull(Attribute)
  names(levels)[i] <-  level
  i <- i +1
  
  
} 


school_level <- tibble()

for(year in census_years){
  
  if(year=="2006"){
    geo_structure_x <- "CD"
  } else{
    geo_structure_x <- "SA1"
  }
  
  school_level_i <- get_census_summary(census_table = census_tables,
                                       selected_years = year,
                                       geo_structure=geo_structure_x,
                                       attribute = levels) |>
  filter(str_detect(Unit,"Shipping",TRUE))|>
  filter(str_detect(Unit,"Usual",TRUE))   |>
  filter(str_detect(Unit,"Not Applicable",TRUE)) 
  
  school_level <- bind_rows(school_level,school_level_i)
  
}
rm(school_level_i,geo_structure_x,i,levels,school_attributes)

#save 
dbWriteTable(mydb, "school_level_granular", school_level,overwrite=TRUE)
rm(school_level)
```

```{r}

#get aussiemaps tables
codes <- c("CD_CODE_2006","SA1_7DIGITCODE_2011","SA1_7DIGITCODE_2016","SA1_CODE_2021")
ceds  <- c("CED_NAME_2006","CED_NAME_2011","CED_NAME_2016","CED_NAME_2021")


school_level <- tibble()
geo_equiv <- list()
 for(i in 1:length(census_years)){
   
   g_i <- aussiemaps::list_structure(year=census_years[i]) |>
          select(any_of(c("id",codes[i],ceds[i]))) |>
          rename("Census_Code" = codes[i])
    
   prop_i <- aussiemaps::list_proportions(codes[i]) |> 
             collect()  |>
             select("id","geo_col","prop") |>
             rename("Census_Code" = "geo_col") 
   

   g_i <- g_i |> 
          left_join(prop_i,by=c("id","Census_Code")) |>
          group_by(across(c("Census_Code",ceds[i]))) |>
          summarise(prop=sum(prop,na.rm=TRUE),.groups = "drop")
     
  
   year_num <- as.double(census_years[i])
   
   value_i <- tbl(mydb,"school_level_granular") |> 
     filter(Year==year_num)          |>
     collect()                       |>
     left_join(g_i,by="Census_Code") |>
     select(-Census_Code,-Unit)      |>
     rename("Unit"=ceds[i])          |>
     group_by(Year,Unit,Attribute)   |>
     summarise(Value=sum(Value*prop,na.rm = TRUE),.groups = "drop")
   
   totals <- value_i |>
            filter(Attribute=="Total") |>
            select(-Attribute) |>
            rename("Total"="Value")
   
   value_i <- value_i |>
              filter(Attribute!="Total")            |>
              left_join(totals,by=c("Year","Unit")) |>
              mutate(Percentage = Value/Total)      |>
              select(-Value,-Total)                 |>
              pivot_wider(names_from = Attribute,values_from = Percentage)
   
   school_level <- bind_rows(school_level,value_i)
   
 }

school_level <- school_level |>
  filter(str_detect(Unit,"Shipping",TRUE))|>
  filter(str_detect(Unit,"Usual",TRUE))   |>
  filter(str_detect(Unit,"Not Applicable",TRUE)) 

dbWriteTable(mydb, "school_level", school_level,overwrite=TRUE)


```

### Income

```{r}
#| eval: true
census_tables <- list_census_tables() |>
                 filter(Number %in% c("16","17")) |>
                 filter(str_detect(`Table Name`,"School",TRUE)) |>
                 filter(str_detect(`Table Name`,"Assistance",TRUE))

tables_summary <- census_tables |>
                  select(-contains("Table")) |>
                  pivot_longer(-Number, names_to="Year",values_to = "Value") |>
                  filter(!is.na(Value)) |>
                  select(-Value)


list_census_geo_tables(year = tables_summary$Year,geo="CED|CED_2007|CED_2004",table_number = tables_summary$Number) |>
  mutate(Year=as.character(Year)) |>
  right_join(tables_summary, by=c("table_number"="Number","Year"="Year"))
```

Not aggregated for all years

```{r}
#| eval: true

list_census_geo_tables(year = tables_summary$Year,geo=c("SA1|CD"),table_number = tables_summary$Number) |>
   mutate(Year=as.character(Year)) |>
  right_join(tables_summary, by=c("table_number"="Number","Year"="Year"))


```

```{r}

income_attributes <- tibble()

for(i in 1:nrow(tables_summary)){
  
  table_i <- tables_summary[i,]$Number
  year_i  <- tables_summary[i,]$Year
  
  attr_i <- list_census_attributes(table_i) |> 
             pivot_longer(-c(Table,Attribute),
                           names_to="Year",values_to = "Value") |>
              filter(Year==year_i) |>
              filter(!is.na(Value)) |>
              select(-Value)
  
  income_attributes <- bind_rows(attr_i,income_attributes)
  
}

  income_attributes <- income_attributes   |> 
                       distinct(Attribute) |>
                      filter(str_detect(Attribute,"[Mm]ales",TRUE)) |>
                      filter(str_detect(Attribute,"[Ff]emales",TRUE)) |>
                      filter(str_detect(Attribute,"[Pp]erson")) |>
                      filter(str_detect(Attribute,"[Aa]ge",TRUE)) |>
                      filter(str_detect(Attribute,"[Yy]ear",TRUE))
income_attributes |> 
  rhandsontable(readOnly = TRUE) |>
  hot_cols(columnSorting = TRUE)

write_csv(income_attributes,"income_levels.csv")
  
```
```{r}
income_attributes <- read_csv("income_levels_edited.csv")

#won't count totals
#totals <- list(Total = income_attributes |> filter(Attr_New=="Total") |> pull(Attribute))

income_levels <- income_attributes  |> distinct(Attr_New) |> pull()

levels <- list()
i <-1
for(level in income_levels){
  
  levels[[i]]      <-  income_attributes |> filter(Attr_New==level)  |> pull(Attribute)
  names(levels)[i] <-  level
  i <- i +1
  
  
} 


income_level <- tibble()

for(year in census_years){
  
  if(year=="2006"){
    geo_structure_x <- "CD"
  } else{
    geo_structure_x <- "SA1"
  }
  
  income_level_i <- get_census_summary(census_table = census_tables,
                                       selected_years = year,
                                       geo_structure=geo_structure_x,
                                       attribute = levels) |>
  filter(str_detect(Unit,"Shipping",TRUE))|>
  filter(str_detect(Unit,"Usual",TRUE))   |>
  filter(str_detect(Unit,"Not Applicable",TRUE)) 
  
  income_level <- bind_rows(income_level,income_level_i)
  
}
rm(income_level_i,geo_structure_x,i,levels,income_attributes)

#save 
dbWriteTable(mydb, "income_level_granular", income_level,overwrite=TRUE)

rm(income_level)

```

```{r}

#get aussiemaps tables
codes <- c("CD_CODE_2006","SA1_7DIGITCODE_2011","SA1_7DIGITCODE_2016","SA1_CODE_2021")
ceds  <- c("CED_NAME_2006","CED_NAME_2011","CED_NAME_2016","CED_NAME_2021")

income_level <- tibble()
geo_equiv <- list()
 for(i in 1:length(census_years)){
   

   value_i <- tbl(mydb,"income_level_granular") |> 
                  filter(Year==year_num)          |>
                  select(-Year,-Unit)               |>
                  collect()                         |>
                  rename(!!original_geo:="Census_Code") |>
                  aussiemaps::geo_aggregate(grouping_col=
                              values_col="Value",
                              original_geo=codes[i],
                              new_geo=ceds[i],
                              year=census_years[i]) |>
              filter(str_detect(Unit,"Shipping",TRUE))|>
              filter(str_detect(Unit,"Usual",TRUE))   |>
              filter(str_detect(Unit,"Not Applicable",TRUE)) 
   
   income_level <- bind_rows(income_level,value_i)
   
 }


   totals <- value_i |>
            filter(Attribute=="Total") |>
            select(-Attribute) |>
            rename("Total"="Value")
   
   value_i <- value_i |>
              filter(Attribute!="Total")            |>
              left_join(totals,by=c("Year","Unit")) |>
              mutate(Percentage = Value/Total)      |>
              select(-Value,-Total)                 |>
              pivot_wider(names_from = Attribute,values_from = Percentage)
   
   
calculate_percentage <- function(data_frame,key_cols,name_col,total_name="Total"){
  
  
  
}


income_level <- income_level 

dbWriteTable(mydb, "income_level", income_level,overwrite=TRUE)


```

```{r}
tbl(mydb,"school_level") |> collect()
```


## Climate Data



```{r}
#| eval: true
dbDisconnect(mydb, shutdown=TRUE)
```

