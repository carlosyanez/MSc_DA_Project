---
title: "cluster_classifier"
editor: visual
format:
  html:
    code-fold: true
    code-summary: "Show the code"
    toc: true
    toc-location: left
    df-print: paged
---

# Setup and load data

```{r}
library(tidyverse)
library(tidymodels)
library(here)
library(gt)
```

```{r}
dataset <- read_csv(here("4. Data","consolidated.csv"))      |>
           filter(election_year!=2022)                       |>
           select(-any_of(c("Metro_Area","Year")))              |>
           mutate(Division = str_c(DivisionNm,"-",election_year),
                  .keep="unused",.before=1)                  |>
            mutate(across(where(is.numeric), ~ replace_na(.x,0)))


clusters <- read_csv(here("4. Data","clusters.csv"))         |>
            mutate(Division = str_c(DivisionNm,"-",Year),
                             .keep="unused")                 |>
            select(-any_of(c("Metro_Area")))


dataset <- dataset |>
           left_join(clusters,by="Division")

rm(clusters)

party_cols <- str_c("y",1:4)
names(party_cols) <- c("GRN","ALP","COAL","Other")

```

# Cluster 0


```{r}
data_0 <- dataset |>
          filter(cluster==0) |>
          select(-cluster)



table <- data_0 |>
  count(Metro,StateAb) |>
  pivot_wider(names_from = StateAb,values_from = n) 



table|>
  gt() |>
  data_color(columns = 2:ncol(table),palette = c("yellow","orange"),
                 domain = c(0,100))
```


```{r}
set.seed(24644)

split_0   <- initial_split(data_0 |> column_to_rownames("Division"),0.8)

training_0 <- training(split_0)

```


```{r}



response_0 <- training_0 |> select(all_of(names(party_cols))) |> as.matrix()
predictors_0<- training_0 |> select(-all_of(names(party_cols)),-StateAb,-Metro) |> as.matrix()


lasso <- joinet::joinet(response_0,predictors_0)

coefs <- coef(lasso)$beta |> 
    as_tibble(rownames="attribute") |>
    mutate(across(contains("y"), ~ round(.x,5))) |>
    rename(all_of(party_cols))

max_y <- coefs |> 
        select(all_of((names(party_cols)))) |>
        mutate(rn = row_number()) %>%
        pivot_longer(-rn, names_to="y",values_to="values") |>
        summarise(max=max(values),min=min(values))



pal <- function(x) {
  f_neg <- scales::col_numeric(
    palette = c(RColorBrewer::brewer.pal(8,"RdBu")[2], '#ffffff'),
    domain = c(max_y[1,]$min, 0)
  )
  f_pos <- scales::col_numeric(
    palette = c('#ffffff', RColorBrewer::brewer.pal(8,"RdBu")[7]),
    domain = c(0, max_y[1,]$max)
  )
  ifelse(x < 0, f_neg(x), f_pos(x))
}


coefs |>
    gt() |>
    data_color(columns=all_of(names(party_cols)),
               colors = pal)

  
```


# Cluster 1


```{r}
data_1 <- dataset |>
          filter(cluster==1) |>
          select(-cluster)


table <-
data_1 |>
  count(Metro,StateAb) |>
  pivot_wider(names_from = StateAb,values_from = n)

table|>
  gt() |>
  data_color(columns = 2:ncol(table),palette = c("yellow","orange"),
                 domain = c(0,100))

```


```{r}
set.seed(24644)

split_1   <- initial_split(data_1 |> column_to_rownames("Division"),0.8)

training_1 <- training(split_1)

```


```{r}



response_1 <- training_1 |> select(all_of(names(party_cols))) |> as.matrix()
predictors_1 <- training_1 |> select(-all_of(names(party_cols)),-StateAb,-Metro) |> as.matrix()


lasso <- joinet::joinet(response_1,predictors_1)

coefs <- coef(lasso)$beta |> 
    as_tibble(rownames="attribute") |>
    mutate(across(contains("y"), ~ round(.x,5))) |>
    rename(all_of(party_cols))

max_y <- coefs |> 
        select(all_of((names(party_cols)))) |>
        mutate(rn = row_number()) %>%
        pivot_longer(-rn, names_to="y",values_to="values") |>
        summarise(max=max(values),min=min(values))



pal <- function(x) {
  f_neg <- scales::col_numeric(
    palette = c(RColorBrewer::brewer.pal(8,"RdBu")[2], '#ffffff'),
    domain = c(max_y[1,]$min, 0)
  )
  f_pos <- scales::col_numeric(
    palette = c('#ffffff', RColorBrewer::brewer.pal(8,"RdBu")[7]),
    domain = c(0, max_y[1,]$max)
  )
  ifelse(x < 0, f_neg(x), f_pos(x))
}


coefs |>
    gt() |>
    data_color(columns=all_of(names(party_cols)),
               colors = pal)

  
```



# Cluster 2


```{r}
data_2 <- dataset |>
          filter(cluster==1) |>
          select(-cluster)



table <- data_2 |>
  count(Metro,StateAb) |>
  pivot_wider(names_from = StateAb,values_from = n) 

table|>
  gt() |>
  data_color(columns = 2:ncol(table),palette = c("yellow","orange"),
                 domain = c(0,100))

```


```{r}
set.seed(24644)

split_2   <- initial_split(data_2 |> column_to_rownames("Division"),0.8)

training_2 <- training(split_2)

```


```{r}



response_2 <- training_2 |> select(all_of(names(party_cols))) |> as.matrix()
predictors_2 <- training_2 |> select(-all_of(names(party_cols)),-StateAb,-Metro) |> as.matrix()


lasso <- joinet::joinet(response_2,predictors_2)

coefs <- coef(lasso)$beta |> 
    as_tibble(rownames="attribute") |>
    mutate(across(contains("y"), ~ round(.x,5))) |>
    rename(all_of(party_cols))

max_y <- coefs |> 
        select(all_of((names(party_cols)))) |>
        mutate(rn = row_number()) %>%
        pivot_longer(-rn, names_to="y",values_to="values") |>
        summarise(max=max(values),min=min(values))



pal <- function(x) {
  f_neg <- scales::col_numeric(
    palette = c(RColorBrewer::brewer.pal(8,"RdBu")[2], '#ffffff'),
    domain = c(max_y[1,]$min, 0)
  )
  f_pos <- scales::col_numeric(
    palette = c('#ffffff', RColorBrewer::brewer.pal(8,"RdBu")[7]),
    domain = c(0, max_y[1,]$max)
  )
  ifelse(x < 0, f_neg(x), f_pos(x))
}


coefs |>
    gt() |>
    data_color(columns=all_of(names(party_cols)),
               colors = pal)

  
```


