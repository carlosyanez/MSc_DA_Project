---
title: "Modelling : glmnet"
format: html
editor: visual
---

```{r setup}
library(here)
library(tidyverse)
library(tidymodels)
library(glmnet)
library(dbscan)
library(factoextra)
library(FactoMineR)

train <- read_csv(here("4. Data","consolidated_clustered.csv"))

test  <- read_csv(here("4. Data","test.csv")) |>
         select(any_of(colnames(train)))

parties <-c("ALP","COAL","GRN","Other")
```

## Clustering

```{r}
train <- train |> select(-any_of(c("cluster")))

groups <- colnames( train |>
                    select(-any_of(c("StateAb","Metro_Area",
                                     "Year","DivisionNm")),
                           -any_of(parties))) |>
          as_tibble() |>
          mutate(group=case_when(
            str_detect(value,"_") ~  str_extract(value, "^([^_]+)"),
            TRUE ~ value
          )) 

group_order <- distinct(groups,group) |> mutate(order=row_number())


groups <- groups|>
  group_by(group) |>
  summarise(n=n(),.groups="drop") |>
  left_join(group_order,by="group") |>
  arrange(order)

transform_pred <- MFA(train |>
                       select(-any_of(c("StateAb","Metro_Area")),
                              -any_of(parties)) |>
                       remove_rownames() |>
                       mutate(key=str_c(DivisionNm,Year,sep="_"),
                              .before=1,.keep="unused") |>
                       column_to_rownames(var="key"),
                       group=groups$n,
                       ncp=10,
                       type=c("n",rep("c",8)),
                       name.group =groups$group,
                       graph=FALSE)
                      

clustering <- dbscan::hdbscan(transform_pred$ind$coord,20)


```

split in groups, train/test

```{r split}

cluster0_train <- train |>  filter(cluster==0)
cluster0_test  <- test  |>  filter(cluster==0)

cluster1_train <- train |>  filter(cluster==1)
cluster1_test  <- test  |>  filter(cluster==1)

cluster2_train <- train |>  filter(cluster==2)
cluster2_test  <- test  |>  filter(cluster==2)

```

```{r}

x <- cluster0_train                      |> 
      select(where(is.numeric))          |> 
      select(-any_of(c(parties,"Year"))) |>
      as.matrix()

y <- cluster0_train             |> 
     select(where(is.numeric))  |>
     select(any_of(c(parties))) |>
     as.matrix()

fit <- glmnet(x, y,family = "mgaussian")
plot(fit)

```

```{r}
coef(fit)$ALP[1:2,1:2]
```

```{r}

```
